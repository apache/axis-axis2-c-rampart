Table of contents
=================
    |_ Getting Rampart/C source working on Linux
    |_ Getting Rampart/C binary distribution working on Linux
    |_ Getting Rampart/C source working on Win32
    |_ Getting Rampart/C binary working on Win32
    |_ Engage Rampart/C with axis2/C
    |_ Trying out the samples in Win32


Getting Rampart/C source working on Linux
=========================================
Build the source

This can be done using the following command sequence:
        ./configure --prefix=${AXIS2C_HOME} --enable-static=no --with-axis2=${AXIS2C_HOME}/include/axis2-1.0
        make
        make install

If you need to try samples, you need to build them.
    -Go to samples and run the script build.sh
    -Then go to  samples/secpolicy and try a scenario
        %sh test_scen.sh scenarioX server-port

Getting Rampart/C binary distribution working on Linux
======================================================
1. Copy modules/rampart to $AXIS2C_HOME/modules
2. Copy samples/server/sec_echo to $AXIS2C_HOME/services/
3. Engage rampart as described in section "Engage Rampart/C with axis2/C"
4. Go to samples/client/sec_echo/ and deploy the client repo 
    %sh deploy_client_repo.sh
5. Go to samples/secpolicy/ and try a scenario
    %sh test_scen.sh scenarioX server-port

Getting Rampart/C source working on Win32
=========================================

1. Set the AXIS2C_HOME envirionment variable to direct to your Axis2/C Installation.
	SET AXIS2C_HOME=[your-path-to-axis2c]

2. Extract the source package and build the source.
	Unzip the source package.
	Go to the "build\win32" directory of the distribution.
	Set the parameters of the configure.in
		AXIS2_BIN_DIR = <path/to/where/you/have/installed/axis2>
		OPENSSL_BIN_DIR = <path/to/where/you/have/installed/openssl>
		DEBUG = <1 if enabled, 0 otherwise>
	Run "nmake install"

3. Engage Rampart/C with Axis2/C as described in the "Engaging Rampart/C with axis2/C" section.


Getting Rampart/C binary distribution working on Win32
======================================================

1. Set the AXIS2C_HOME envirionment variable to direct to your Axis2/C Installation.
	SET AXIS2C_HOME=[your-path-to-axis2c]

2. Run the deploy_rampart.bat that could be found in the root of the rampart binary distribution.
	deploy_rampart.bat

3. Engage Rampart/C with Axis2/C as described in the "Engaging Rampart/C with axis2/C" section.

Engaging Rampart/C with axis2/C
===============================
Prerequisites:
You must have openssl installed in you system.

Configuring:
You can engage Rampart/C in global level or in service level.
Just add following entry either to axis2.xml(gloabl level) or in services.xml(service level).
    <module ref="rampart"/>

Apart from that you must define security policies for outgoing messages and incoming messages.
This can be done adding parameters as follows in the same descriptor file that you engaged rampart. 
    <parameter name="OutflowSecurityPolicy">/your/path/to/outgoing-secpolicy.xml</parameter>
    <parameter name="InflowSecurityPolicy">/your/path/to/incoming-secpolicy.xml</parameter>
    
NOTE: There are several samples security policy xml files for different scenarios under samples/secpolicy/
        Please refer the README file for more information

The final configuration setup should be as follows
CLIENT SIDE:
axis2.xml
        |-------------------> <module ref="rampart"/>
        |-------------------> <parameter name="OutflowSecurityPolicy">/../../outgoing-secpolicy.xml</parameter>
        |-------------------> <parameter name="InflowSecurityPolicy">/../../incoming-secpolicy.xml</parameter>

SERVER SIDE:
services.xml(or axis2.xml)
        |-------------------> <module ref="rampart"/>
        |-------------------> <parameter name="OutflowSecurityPolicy">/../../outgoing-secpolicy.xml</parameter>
        |-------------------> <parameter name="InflowSecurityPolicy">/../../incoming-secpolicy.xml</parameter>


Trying out the samples on Win32
===============================

There are 9 scenarios that you can try out with the sec_echo sample of the Rampart/C distribution.
You can find more about it from the README.TXT file inside samples\secpolicy folder.

1. Set the AXIS2C_HOME envirionment variable to direct to your Axis2/C Installation.
	SET AXIS2C_HOME=[your-path-to-axis2c]

2. Run the deploy_client_repo.bat file found in the samples\client\sec_echo folder.
	This will create an axis2 client repository for the samples in the AXIS2C_HOME\clientrepo directory.

3. Set the outflow and inflow secpolicy parameters in axis2.xml of the client repo, according to the scenario that you are running.
    e.g.
	<parameter name="OutflowSecurityPolicy">D:\rampart-bin-0.90-win32\samples\secpolicy\scenario1\client-outgoing-secpolicy.xml</parameter> 
	<parameter name="InflowSecurityPolicy">D:\rampart-bin-0.90-win32\samples\secpolicy\scenario1\client-incoming-secpolicy.xml</parameter> 

4. Set the outflow and inflow secpolicy parameters in services.xml of the sec_echo service in the axis2 server repo.
    e.g.
	<parameter name="OutflowSecurityPolicy">D:\rampart-bin-0.90-win32\samples\secpolicy\scenario1\service-outgoing-secpolicy.xml</parameter> 
	<parameter name="InflowSecurityPolicy">D:\rampart-bin-0.90-win32\samples\secpolicy\scenario1\service-incoming-secpolicy.xml</parameter> 

NOTE: In steps 3 & 4 you have to use the corresponding scenario files in each parameter. For example if you are running the sample scenario 3, all the files should be from scenario 3.

Thank you for using Rampart/C
